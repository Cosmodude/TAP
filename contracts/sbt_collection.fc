#include "imports/stdlib.fc";
#include "imports/op_codes.fc";
#include "imports/params.fc";

;; SBT collection smart contract

;; storage scheme
;; storage#_ owner_address:MsgAddress next_item_index:uint64
;;           ^[collection_content:^Cell common_content:^Cell]
;;           sbt_item_code:^Cell
;;           = Storage;

global slice storage::owner_address;
global int storage::next_item_index;
global cell storage::content;
global cell storage::sbt_item_code;

() load_data() inline {
    slice ds = get_data().begin_parse();
    storage::owner_address     = ds~load_msg_addr();
    storage::next_item_index   = ds~load_uint(64);
    storage::content           = ds~load_ref();
    ;;storage::authority_address = ds~load_msg_addr();
    storage::sbt_item_code     = ds~load_ref();
}

() save_data(slice owner_address, int next_item_index, cell content, cell sbt_item_code) impure inline {
    set_data(
        begin_cell()
            .store_slice(owner_address)
            .store_uint(next_item_index, 64)
            .store_ref(content)
            .store_ref(sbt_item_code)
            .end_cell());
}

;; Recreation functions

;; State Init
cell calculate_sbt_item_state_init(int item_index, cell sbt_item_code) {
  cell data = begin_cell().store_uint(item_index, 64).store_slice(my_address()).end_cell();
  return begin_cell().store_uint(0, 2).store_dict(sbt_item_code).store_dict(data).store_uint(0, 1).end_cell();
}

;; Item Address
slice calculate_sbt_item_address(int wc, cell state_init) { 
  return begin_cell().store_uint(4, 3)
                     .store_int(wc, 8)
                     .store_uint(cell_hash(state_init), 256)
                     .end_cell()
                     .begin_parse();
}

;; Auxiliary function

;; Deploy a single SBT
() deploy_sbt_item(int item_index, cell sbt_item_code, int amount, cell sbt_content) impure {
  cell state_init = calculate_sbt_item_state_init(item_index, sbt_item_code); ;; owner addres is in the sbt_item_code
  slice sbt_address = calculate_sbt_item_address(workchain(), state_init);
  var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(sbt_address)
            .store_coins(amount)  ;; value
            .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
            .store_ref(state_init)
            .store_ref(sbt_content);
  send_raw_message(msg.end_cell(), 1); ;; pay transfer fees separately, revert on errors
}

() recv_internal(cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages, bitwise "and"
		  return ();
    }
    slice sender_address = cs~load_msg_addr();

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    load_data();

    if (op == 1) { ;; deploy(mint) new sbt
      int item_index = in_msg_body~load_uint(64);
      throw_unless(402, item_index <= storage::next_item_index);
      deploy_sbt_item(storage::next_item_index, storage::sbt_item_code, in_msg_body~load_coins(), in_msg_body~load_ref());  ;; gets the value to be sent with item deploy and the body
      storage::next_item_index += 1;
      save_data(storage::owner_address, storage::next_item_index, storage::content, storage::sbt_item_code);
      return ();
    }

    throw_unless(401, equal_slices(sender_address, storage::owner_address));
    if (op == 2) { ;; batch deploy of new sbts
      int counter = 0;
      cell deploy_list = in_msg_body~load_ref();
      do {
        var (item_index, item, f?) = deploy_list~udict::delete_get_min(64);
        if (f?) {
          counter += 1;
          if (counter >= 250) { ;; Limit due to limits of action list size
            throw(399);
          }

          throw_unless(403 + counter, item_index <= storage::next_item_index);
          deploy_sbt_item(item_index, storage::sbt_item_code, item~load_coins(), item~load_ref());
          if (item_index == storage::next_item_index) {
            storage::next_item_index += 1;
          }
        }
      } until ( ~ f?);
      save_data(storage::owner_address, storage::next_item_index, storage::content, storage::sbt_item_code);
      return ();
    }
    
    if (op == 3) { ;; change owner
      slice new_owner = in_msg_body~load_msg_addr();
      save_data(new_owner, storage::next_item_index, storage::content, storage::sbt_item_code);
      return ();
    }
    throw(0xffff);
}

;; Get methods

(int, cell, slice) get_collection_data() method_id {
  load_data();
  slice cs = storage::content.begin_parse();
  return (storage::next_item_index, cs~load_ref(), storage::owner_address);
}

slice get_sbt_address_by_index(int index) method_id {
    load_data();
    cell state_init = calculate_sbt_item_state_init(index, storage::sbt_item_code);
    return calculate_sbt_item_address(0, state_init);
}


cell get_sbt_content(int index, cell individual_sbt_content) method_id {  ;; ??? content
    load_data();
    slice cs = storage::content.begin_parse();
    cs~load_ref();
    slice common_content = cs~load_ref().begin_parse();
    return (begin_cell()
                        .store_uint(1, 8) ;; offchain tag https://github.com/ton-blockchain/TIPs/issues/64
                        .store_slice(common_content)
                        .store_ref(individual_sbt_content)
            .end_cell());
}
